# SOLID-принципы Роберта К. Мартина (Дяди Боба) расшифровываются следующим образом:


# S – Принцип единственной ответственности (Single Responsibility Principle),
'''гласит, что у каждого класса должна быть только одна «ответственность»
и он не должен брать на себя другие обязанности.'''
# то есть не стоит добавлять в один класс всё подряд,
# к примеру парсер данных, обработчик данных, сохранение данных в файл,
# а лучше разнести эти 3 функциональности на разные классы.


# O – Принцип открытости/закрытости (Open‐Closed Principle),
'''гласит «Сущности программы (классы, модули, функции и т.д.) должны быть открыты для расширения, но закрыты для изменений».
'''
# то есть принцип гласит что лучше расширить то что работает хорошо
# с помощью надстройки, чем изменять хорошо работающую родительскую сущность
# таким образом можно предотвратить частые изменения в хорошо зарекомендовавшей себя сущности.


# L – Принцип подстановки Барбары Лисков (Liskov Substitution Principle),
'''гласит: «Объекты в программе должны быть заменяемы экземплярами их подтипов без ущерба корректности работы программы».
'''
# то есть принцип гласит что дочерний класс может заменить родительский без нарушения логики работы программы
# к примеру методы в родительском и дочернем классе должны иметь одинаковое количество аргументов
# Следуя принципу подстановки Лисков, я гарантирую,
# что смогу заменить родительский класс с помощью дочернего класса без какого-либо негативного воздействия на программу.


# I – Принцип разделения интерфейсов (Interface Segregation Principle),
'''гласит, что «Ни один клиент не должен зависеть от методов, которые он не использует». 
'''
# ISP предполагает создание небольших интерфейсов, состоящих из нескольких методов, вместо одного большого интерфейса.
# Разделяя методы на более мелкие интерфейсы, клиенты будут зависеть только от методов, которые имеют к ним отношение.


# D – Принцип инверсии зависимостей (Dependency Inversion Principle).
'''гласит, Модуль высокого уровня не должен зависеть от модулей низкого уровня. И то, и другое должно зависеть от абстракций. 
Абстракции не должны зависеть от деталей реализации. Детали реализации должны зависеть от абстракций.
'''
